package fr.ujm.ptorrent.GUI;

import fr.ujm.ptorrent.client.PlayerClient;
import fr.ujm.ptorrent.model.Library;
import fr.ujm.ptorrent.model.Player;
import fr.ujm.ptorrent.model.Stuff;
import fr.ujm.ptorrent.utils.JsonHelper;
import fr.ujm.ptorrent.utils.Librairifier;
import fr.ujm.ptorrent.utils.NetUtils;

import javax.swing.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.Objects;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;

public class PlayerInterface extends JFrame {

    private final Logger LOGGER = Logger.getLogger(PlayerInterface.class.getName());
    private Player player;
    // Variables declaration - do not modify
    private JButton btnDownload;
    private JButton btnUpload;
    private JComboBox<Library> cmbStuff;
    private JLabel jLabel1;
    private JPanel jPanel1;
    private JPanel jPanel2;

    /**
     * Creates new form main
     */
    public PlayerInterface() throws IOException {
        initComponents();
        player = new Player(NetUtils.getCurrentIp(), 9988);
        JsonHelper jsonHelper = new JsonHelper();
        for (final File file : Objects.requireNonNull(new File(Objects.requireNonNull(PlayerInterface.class.getClassLoader().getResource("libs")).getPath()).listFiles())) {
            if (file.getName().contains(".")) {
                System.out.println(file.getName());
                String[] fileInfo = file.getName().split("\\.");
                System.out.println(Arrays.toString(fileInfo));
                if ("lib".equals(fileInfo[fileInfo.length - 1])) {
                    try {
                        System.out.println(Arrays.toString(fileInfo));
                        StringBuilder fileName = new StringBuilder();
                        for (int i = 0; i < fileInfo.length - 1; i++) {
                            if (i == fileInfo.length - 2)
                                fileName.append(fileInfo[i]);
                            else
                                fileName.append(fileInfo[i]).append(".");
                        }
                        System.out.println(fileName);
                        Library library = jsonHelper.readLibraryFile(fileName.toString());
                        cmbStuff.addItem(library);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                }
            }
        }

//        player.setLibrary((Library) cmbStuff.getSelectedItem());
//        PlayerClient playerClient = PlayerClient.getInstance(player);
//        if (!playerClient.connectToHub(player.getLibrary().getIp(), Integer.parseInt(player.getLibrary().getPort())))
//            throw new ConnectException();
//        cmbStuff.addItem(stuff);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PlayerInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(PlayerInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(PlayerInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(PlayerInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new PlayerInterface().setVisible(true);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new JPanel();
        cmbStuff = new JComboBox<>();
        jLabel1 = new JLabel();
        btnDownload = new JButton();
        jPanel2 = new JPanel();
        btnUpload = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        //cmbStuff.setModel(new javax.swing.DefaultComboBoxModel<>());
        cmbStuff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStuffActionPerformed(evt);
            }
        });

        jLabel1.setText("Chose a file");

        btnDownload.setText("Download");

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jLabel1)
                                .addGap(33, 33, 33)
                                .addComponent(cmbStuff, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(72, Short.MAX_VALUE))
                        .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDownload, GroupLayout.PREFERRED_SIZE, 279, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(cmbStuff, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addComponent(btnDownload, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        btnUpload.setText("Upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        btnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadActionPerformed(evt);
            }
        });

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(btnUpload, GroupLayout.PREFERRED_SIZE, 282, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpload)
                                .addGap(50, 50, 50))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void cmbStuffActionPerformed(java.awt.event.ActionEvent evt) {
        PlayerClient playerClient = PlayerClient.getInstance(player);
        if (!playerClient.connectToHub((Library) cmbStuff.getSelectedItem()))
            JOptionPane.showMessageDialog(null, "Can't connect to the hub. The server hub is offline");
    }

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new File("/"));
            chooser.changeToParentDirectory();
            chooser.showOpenDialog(null);

            String path = chooser.getSelectedFile().getPath();
            Stuff stuff = new Stuff(path);

            Librairifier gen = new Librairifier();
            gen.stuffToBooks(stuff);
            gen.booksToStuff(stuff.getBooks(), stuff.getName());
            JOptionPane.showMessageDialog(null, "library file is generated");
            LOGGER.log(Level.INFO, ".libr generated");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "ERROR generating the library file");
        }
    }

    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {
        System.out.println("downloading ......");
        if (player.stuffIsDownloaded()) {
            JOptionPane.showMessageDialog(null, "Download is already complete");
            return;
        }
        if (!player.isConnetedToHub()) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "You're not connected to the hub. try to reconnect?", "Warning", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                PlayerClient playerClient = PlayerClient.getInstance(player);
                if (!playerClient.connectToHub((Library) cmbStuff.getSelectedItem()))
                    JOptionPane.showMessageDialog(null, "Can't connect to the hub. The server hub is offline");

            }
            return;
        }
        try {
            final PlayerClient playerClient = PlayerClient.getInstance(player);
            player.setPlayers(playerClient.getClientsListFromHub());

            playerClient.startDownload();
            new Thread() {
                public void run() {
                    long time = player.getRequestInterval() * 10000;
                    Timer t = new Timer(true);
                    t.schedule(new TimerTask() {
                        @Override
                        public void run() {
                            System.out.println("Im in scheduler");
                            try {
                                synchronized (this) {
                                    player.setPlayers(playerClient.getClientsListFromHub());
                                }
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                        }
                    }, time);
                }
            }.start();


        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    // End of variables declaration
}

